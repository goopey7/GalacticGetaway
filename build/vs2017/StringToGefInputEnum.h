#pragma once
#include <map>
#include <string>
#include <input/keyboard.h>

#include "input/sony_controller_input_manager.h"

static std::map<std::string, gef::Keyboard::KeyCode> stringToKeyCode =
{
	{"0", gef::Keyboard::KeyCode::KC_0},
	{"1", gef::Keyboard::KeyCode::KC_1},
	{"2", gef::Keyboard::KeyCode::KC_2},
	{"3", gef::Keyboard::KeyCode::KC_3},
	{"4", gef::Keyboard::KeyCode::KC_4},
	{"5", gef::Keyboard::KeyCode::KC_5},
	{"6", gef::Keyboard::KeyCode::KC_6},
	{"7", gef::Keyboard::KeyCode::KC_7},
	{"8", gef::Keyboard::KeyCode::KC_8},
	{"9", gef::Keyboard::KeyCode::KC_9},
	{"A", gef::Keyboard::KeyCode::KC_A},
	{"B", gef::Keyboard::KeyCode::KC_B},
	{"C", gef::Keyboard::KeyCode::KC_C},
	{"D", gef::Keyboard::KeyCode::KC_D},
	{"E", gef::Keyboard::KeyCode::KC_E},
	{"F", gef::Keyboard::KeyCode::KC_F},
	{"G", gef::Keyboard::KeyCode::KC_G},
	{"H", gef::Keyboard::KeyCode::KC_H},
	{"I", gef::Keyboard::KeyCode::KC_I},
	{"J", gef::Keyboard::KeyCode::KC_J},
	{"K", gef::Keyboard::KeyCode::KC_K},
	{"L", gef::Keyboard::KeyCode::KC_L},
	{"M", gef::Keyboard::KeyCode::KC_M},
	{"N", gef::Keyboard::KeyCode::KC_N},
	{"O", gef::Keyboard::KeyCode::KC_O},
	{"P", gef::Keyboard::KeyCode::KC_P},
	{"Q", gef::Keyboard::KeyCode::KC_Q},
	{"R", gef::Keyboard::KeyCode::KC_R},
	{"S", gef::Keyboard::KeyCode::KC_S},
	{"T", gef::Keyboard::KeyCode::KC_T},
	{"U", gef::Keyboard::KeyCode::KC_U},
	{"V", gef::Keyboard::KeyCode::KC_V},
	{"W", gef::Keyboard::KeyCode::KC_W},
	{"X", gef::Keyboard::KeyCode::KC_X},
	{"Y", gef::Keyboard::KeyCode::KC_Y},
	{"Z", gef::Keyboard::KeyCode::KC_Z},
	{"F1", gef::Keyboard::KeyCode::KC_F1},
	{"F2", gef::Keyboard::KeyCode::KC_F2},
	{"F3", gef::Keyboard::KeyCode::KC_F3},
	{"F4", gef::Keyboard::KeyCode::KC_F4},
	{"F5", gef::Keyboard::KeyCode::KC_F5},
	{"F6", gef::Keyboard::KeyCode::KC_F6},
	{"F7", gef::Keyboard::KeyCode::KC_F7},
	{"F8", gef::Keyboard::KeyCode::KC_F8},
	{"F9", gef::Keyboard::KeyCode::KC_F9},
	{"F10", gef::Keyboard::KeyCode::KC_F10},
	{"F11", gef::Keyboard::KeyCode::KC_F11},
	{"F12", gef::Keyboard::KeyCode::KC_F12},
	{"F13", gef::Keyboard::KeyCode::KC_F13},
	{"F14", gef::Keyboard::KeyCode::KC_F14},
	{"F15", gef::Keyboard::KeyCode::KC_F15},
	{"NUMPAD0", gef::Keyboard::KeyCode::KC_NUMPAD0},
	{"NUMPAD1", gef::Keyboard::KeyCode::KC_NUMPAD1},
	{"NUMPAD2", gef::Keyboard::KeyCode::KC_NUMPAD2},
	{"NUMPAD3", gef::Keyboard::KeyCode::KC_NUMPAD3},
	{"NUMPAD4", gef::Keyboard::KeyCode::KC_NUMPAD4},
	{"NUMPAD5", gef::Keyboard::KeyCode::KC_NUMPAD5},
	{"NUMPAD6", gef::Keyboard::KeyCode::KC_NUMPAD6},
	{"NUMPAD7", gef::Keyboard::KeyCode::KC_NUMPAD7},
	{"NUMPAD8", gef::Keyboard::KeyCode::KC_NUMPAD8},
	{"NUMPAD9", gef::Keyboard::KeyCode::KC_NUMPAD9},
	{"NUMPADENTER", gef::Keyboard::KeyCode::KC_NUMPADENTER},
	{"NUMPADSTAR", gef::Keyboard::KeyCode::KC_NUMPADSTAR},
	{"NUMPADEQUALS", gef::Keyboard::KeyCode::KC_NUMPADEQUALS},
	{"NUMPADMINUS", gef::Keyboard::KeyCode::KC_NUMPADMINUS},
	{"NUMPADPLUS", gef::Keyboard::KeyCode::KC_NUMPADPLUS},
	{"NUMPADPERIOD", gef::Keyboard::KeyCode::KC_NUMPADPERIOD},
	{"NUMPADSLASH", gef::Keyboard::KeyCode::KC_NUMPADSLASH},
	{"ESCAPE", gef::Keyboard::KeyCode::KC_ESCAPE},
	{"TAB", gef::Keyboard::KeyCode::KC_TAB},
	{"LSHIFT", gef::Keyboard::KeyCode::KC_LSHIFT},
	{"RSHIFT", gef::Keyboard::KeyCode::KC_RSHIFT},
	{"LCONTROL", gef::Keyboard::KeyCode::KC_LCONTROL},
	{"RCONTROL", gef::Keyboard::KeyCode::KC_RCONTROL},
	{"BACKSPACE", gef::Keyboard::KeyCode::KC_BACKSPACE},
	{"RETURN", gef::Keyboard::KeyCode::KC_RETURN},
	{"LALT", gef::Keyboard::KeyCode::KC_LALT},
	{"SPACE", gef::Keyboard::KeyCode::KC_SPACE},
	{"CAPSLOCK", gef::Keyboard::KeyCode::KC_CAPSLOCK},
	{"NUMLOCK", gef::Keyboard::KeyCode::KC_NUMLOCK},
	{"SCROLL", gef::Keyboard::KeyCode::KC_SCROLL},
	{"RALT", gef::Keyboard::KeyCode::KC_RALT},
	{"AT", gef::Keyboard::KeyCode::KC_AT},
	{"COLON", gef::Keyboard::KeyCode::KC_COLON},
	{"UNDERLINE", gef::Keyboard::KeyCode::KC_UNDERLINE},
	{"MINUS", gef::Keyboard::KeyCode::KC_MINUS},
	{"EQUALS", gef::Keyboard::KeyCode::KC_EQUALS},
	{"LBRACKET", gef::Keyboard::KeyCode::KC_LBRACKET},
	{"RBRACKET", gef::Keyboard::KeyCode::KC_RBRACKET},
	{"SEMICOLON", gef::Keyboard::KeyCode::KC_SEMICOLON},
	{"APOSTROPHE", gef::Keyboard::KeyCode::KC_APOSTROPHE},
	{"GRAVE", gef::Keyboard::KeyCode::KC_GRAVE},
	{"BACKSLASH", gef::Keyboard::KeyCode::KC_BACKSLASH},
	{"COMMA", gef::Keyboard::KeyCode::KC_COMMA},
	{"PERIOD", gef::Keyboard::KeyCode::KC_PERIOD},
	{"SLASH", gef::Keyboard::KeyCode::KC_SLASH},
	{"UP", gef::Keyboard::KeyCode::KC_UP},
	{"DOWN", gef::Keyboard::KeyCode::KC_DOWN},
	{"LEFT", gef::Keyboard::KeyCode::KC_LEFT},
	{"RIGHT", gef::Keyboard::KeyCode::KC_RIGHT},
	{"PGUP", gef::Keyboard::KeyCode::KC_PGUP},
	{"PGDN", gef::Keyboard::KeyCode::KC_PGDN},
};

static std::map<std::string, uint32_t> stringToControllerButton = 
{
	{"START", gef_SONY_CTRL_START},
	{"SELECT", gef_SONY_CTRL_SELECT},
	{"UP", gef_SONY_CTRL_UP},
	{"DOWN", gef_SONY_CTRL_DOWN},
	{"LEFT", gef_SONY_CTRL_LEFT},
	{"RIGHT", gef_SONY_CTRL_RIGHT},
	{"L3", gef_SONY_CTRL_L3},
	{"R3", gef_SONY_CTRL_R3},
	{"L2", gef_SONY_CTRL_L2},
	{"R2", gef_SONY_CTRL_R2},
	{"L1", gef_SONY_CTRL_L1},
	{"R1", gef_SONY_CTRL_R1},
	{"Y", gef_SONY_CTRL_TRIANGLE},
	{"B", gef_SONY_CTRL_CIRCLE},
	{"A", gef_SONY_CTRL_CROSS},
	{"X", gef_SONY_CTRL_SQUARE},
};
